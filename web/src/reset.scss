// 样式重置
*{
    box-sizing: border-box;
    outline: none;
}
html {
    font-size: 13px;
}
body{
    margin: 0;
    font-family: Arial, Helvetica, sans-serif;
    line-height: 1.2em;
    background: #f1f1f1;
}
a{
    color: #999999;
}

// 定义通用颜色类
$colors: (
    "primary": #db9e3f,
    "white": #fff,
    "black": #000,
    "dark": #222,
    "grey": #999,
    "light": #f9f9f9,
    "dark-1": #343440
);
@each $colorKey, $color in $colors {
    .text-#{$colorKey} {
        color: $color;
    }
    .bg-#{$colorKey} {
        background-color: $color;
    }
}

// 定义通用字体类
@each $var in (left, center, right) {
    .text-#{$var} {
        text-align: $var
    }
}
$base-font-size: 1rem;
$font-size: (
    xs: 0.7692,// 10px
    sm: 0.9231,// 12px
    md: 1,// 13px
    lg: 1.0769,// 14px
    xl: 1.2308// 16px
);
@each $sizeKey, $size in $font-size {
    .fs-#{$sizeKey} {
        font-size: $size * $base-font-size;
    }
}

// 定义通用flex布局类
.d-flex{
    display: flex;
}
.flex-column{
    flex-direction: column;
}
.flex-1{
    flex: 1;
}
$flex-jc: (
    start: flex-start,
    end: flex-end,
    center: center,
    between: space-between,
    around: space-around
);
@each $key, $value in $flex-jc {
    .jc-#{$key} {
        justify-content: $value;
    }
}

$flex-ai: (
    start: flex-start,
    end: flex-end,
    center: center,
    stretch: stretch
);
@each $key, $value in $flex-ai {
    .ai-#{$key} {
        align-items: $value;
    }
}

//  定义通用边距类
$spacing-types: (
    m: margin,
    p: padding,
);
$spacing-directions: (
    t: top,
    r: right,
    b: bottom,
    l: left
);
$spacing-base-size: 1rem;
$spacing-size: (
    0: 0,
    1: 0.25,
    2: 0.5,
    3: 1,
    4: 1.5,
    5: 3
);
@each $typeKey, $type in $spacing-types {
    // m-0
    @each $sizeKey, $size in $spacing-size {
        .#{$typeKey}-#{$sizeKey} {
            #{$type}: $size * $spacing-base-size
        }
    }
    // my-0
    @each $sizeKey, $size in $spacing-size {
        .#{$typeKey}x-#{$sizeKey} {
            #{$type}-left: $size * $spacing-base-size;
            #{$type}-right: $size * $spacing-base-size
        }
        .#{$typeKey}y-#{$sizeKey} {
            #{$type}-top: $size * $spacing-base-size;
            #{$type}-bottom: $size * $spacing-base-size
        }
    }
    // mr-0
    @each $directionKey, $direction in $spacing-directions {
        @each $sizeKey, $size in $spacing-size {
            .#{$typeKey}#{$directionKey}-#{$sizeKey} {
                #{$type}-#{$direction}: $size * $spacing-base-size
            }
        }
    }
}